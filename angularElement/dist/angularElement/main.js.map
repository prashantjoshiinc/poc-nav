{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/framework-poll/framework-poll.component.css","webpack:///./src/app/framework-poll/framework-poll.component.html","webpack:///./src/app/framework-poll/framework-poll.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,mB;;;;;;;;;;;ACAA,mJAAmJ,SAAS,uG;;;;;;;;;;;;;;;;;;;;;ACAlH;AAO1C;IALA;QAME,UAAK,GAAG,gBAAgB,CAAC;IAC3B,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACP;AAEJ;AACS;AAC2B;AACf;AAgBpE;IACE,mBAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;IAAI,CAAC;IAC3C,iCAAa,GAAb;QACG,qFAAqF;QACrF,8CAA8C;QAC7C,8CAA8C;QAChD,GAAG;QAEH,IAAM,eAAe,GAAG,IAAI,iFAA0B,CAAC,+FAAsB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5F,IAAM,OAAO,GAAG,6EAAmB,CAAC,+FAAsB,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,eAAe,mBAAE,CAAC,CAAC;QAC1G,cAAc,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;IAXU,SAAS;QAdrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,+FAAsB;aACvB;YACD,OAAO,EAAE;gBACP,uEAAa;aACd;YACD,eAAe,EAAE;gBACf,+FAAsB;aACvB;YACD,6BAA6B;YAC7B,SAAS,EAAE,EAAE;SACd,CAAC;yCAE8B,sDAAQ;OAD3B,SAAS,CAYrB;IAAD,gBAAC;CAAA;AAZqB;;;;;;;;;;;;ACtBtB,mB;;;;;;;;;;;ACAA,gHAAgH,OAAO,Q;;;;;;;;;;;;;;;;;;;;;;;;ACA9D;AAQzD;IAIE;IAAgB,CAAC;IACjB,yCAAQ,GAAR;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;QAE7B,kDAAkD;QAClD,iEAAiE;QACjE,8EAA8E;QAC9E,iDAAiD;QACjD,+EAA+E;QAC/E,KAAK;IACP,CAAC;IAZQ;QAAR,2DAAK,EAAE;;8DAAgB;IAFb,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;;SAG/B,CAAC;;OACW,sBAAsB,CAgBlC;IAAD,6BAAC;CAAA;AAhBkC;;;;;;;;;;;;;ACRnC;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to {{ title }}!\\n  </h1>\\n</div>\\n \\n<!-- <app-framework-poll [userDetail] = \\\"title\\\"></app-framework-poll> -->\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angularElement';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { Injector, NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { createCustomElement } from '@angular/elements';\nimport { FrameworkPollComponent } from './framework-poll/framework-poll.component';\nimport { ElementZoneStrategyFactory } from 'elements-zone-strategy';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    FrameworkPollComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  entryComponents: [\n    FrameworkPollComponent\n  ],\n  // bootstrap: [AppComponent],\n  providers: [],\n})\nexport class AppModule {\n  constructor(private injector: Injector) { }\n  ngDoBootstrap() {\n     //const el = createCustomElement(FrameworkPollComponent, { injector: this.injector});\n     //if (!customElements.get('framework-poll')) {\n      //customElements.define('framework-poll', el);\n    //}\n\n    const strategyFactory = new ElementZoneStrategyFactory(FrameworkPollComponent, this.injector);\n      const element = createCustomElement(FrameworkPollComponent, { injector: this.injector, strategyFactory });\n      customElements.define('framework-poll', element);\n  }\n}\n","module.exports = \"\"","module.exports = \"<p>\\n  Monolith Application works!\\n  Angular Version: 6.1.0\\n</p>\\n\\n<h4>User Detail(s)  : {{title}}</h4>\\n\"","import { Component, Input, OnInit } from '@angular/core';\nimport { fromEvent } from 'rxjs';\n\n@Component({\n  selector: 'app-framework-poll',\n  templateUrl: './framework-poll.component.html',\n  styleUrls: ['./framework-poll.component.css']\n})\nexport class FrameworkPollComponent implements OnInit {\n  title: any;\n  @Input() userDetail:any;\n\n  constructor() { }\n  ngOnInit() {\n    this.title = this.userDetail;\n\n    // fromEvent(window, 'event').subscribe((event)=>{\n    //   this.title = `Current logged in User is ${event['detail']}`;\n    //   // const myAngularElement = document.createElement('app-framework-poll');\n    //   //  myAngularElement['userDetail'] = 'John';\n    //   //  document.getElementById('my-container').appendChild(myAngularElement);\n    // })\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}